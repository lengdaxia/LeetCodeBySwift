/*
给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。

在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。

返回 你能获得的 最大 利润 。

 

示例 1：

输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
     总利润为 4 + 3 = 7 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     总利润为 4 。
示例 3：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。
 

提示：

1 <= prices.length <= 3 * 104
0 <= prices[i] <= 104
*/ 


class Solution2 {

    static func maxProfit(_ prices:[Int]) -> Int {

        let n = prices.count
        // 二位状态数组，dp[n][2], 代表每天不同状态的盈利数量，每天的盈利状态都依赖于上一天的交易状态
        // dp[n][0]　第n天没有持有股票，表示n-1天没有持有股票，或者n-1天持有但是卖出了
        // dp[n][1]　第n天没有持有股票，表示n-1天持有股票，或者n-1天没有持有但是买入了
        var dp = Array.init(repeating: Array.init(repeating: 0, count: 2), count: n)
        for i in 0..<n {
            // 基础case
            if i == 0 {
                // 第一天没有买入。盈利为0
                dp[0][0] = 0
                // 第一天持有股票（不可能），盈利为第一天的股票价格的负数，为了填充第二天计算数据
                dp[0][1] = -prices[0]
                continue
            }
            // 其他天数，根据前一天的盈利和股票价格，计算相对较大的盈利，并更新dp状态转移二维数组
              // 不持有股票
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
              // 持有股票
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
        }
        return dp[n-1][0];
    }
    
}

let prices = [7,1,5,3,6,4]
let ret = Solution2.maxProfit(prices)
print(ret)